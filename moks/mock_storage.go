// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\server\server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Dorrrke/g2-books/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeleteBook mocks base method.
func (m *MockStorage) DeleteBook(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockStorageMockRecorder) DeleteBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockStorage)(nil).DeleteBook), arg0)
}

// DeleteBooks mocks base method.
func (m *MockStorage) DeleteBooks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBooks")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBooks indicates an expected call of DeleteBooks.
func (mr *MockStorageMockRecorder) DeleteBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBooks", reflect.TypeOf((*MockStorage)(nil).DeleteBooks))
}

// GetBookById mocks base method.
func (m *MockStorage) GetBookById(arg0 string) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookById", arg0)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookById indicates an expected call of GetBookById.
func (mr *MockStorageMockRecorder) GetBookById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookById", reflect.TypeOf((*MockStorage)(nil).GetBookById), arg0)
}

// GetBookByUID mocks base method.
func (m *MockStorage) GetBookByUID(arg0 string) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByUID", arg0)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByUID indicates an expected call of GetBookByUID.
func (mr *MockStorageMockRecorder) GetBookByUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByUID", reflect.TypeOf((*MockStorage)(nil).GetBookByUID), arg0)
}

// GetBooks mocks base method.
func (m *MockStorage) GetBooks() ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks")
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockStorageMockRecorder) GetBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockStorage)(nil).GetBooks))
}

// SaveBook mocks base method.
func (m *MockStorage) SaveBook(arg0 models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBook indicates an expected call of SaveBook.
func (mr *MockStorageMockRecorder) SaveBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBook", reflect.TypeOf((*MockStorage)(nil).SaveBook), arg0)
}

// SaveUser mocks base method.
func (m *MockStorage) SaveUser(arg0 models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockStorageMockRecorder) SaveUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockStorage)(nil).SaveUser), arg0)
}

// ValidateUser mocks base method.
func (m *MockStorage) ValidateUser(arg0 models.User) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateUser indicates an expected call of ValidateUser.
func (mr *MockStorageMockRecorder) ValidateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockStorage)(nil).ValidateUser), arg0)
}
